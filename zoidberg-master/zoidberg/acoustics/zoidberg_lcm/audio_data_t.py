"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class audio_data_t(object):
    __slots__ = ["timestamp", "num_channels", "num_samples", "fc", "fs", "num_step", "re_samples", "im_samples"]

    __typenames__ = ["string", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "float", "float"]

    __dimensions__ = [None, None, None, None, None, None, ["num_channels", "num_samples"], ["num_channels", "num_samples"]]

    def __init__(self):
        self.timestamp = ""
        self.num_channels = 0
        self.num_samples = 0
        self.fc = 0
        self.fs = 0
        self.num_step = 0
        self.re_samples = []
        self.im_samples = []

    def encode(self):
        buf = BytesIO()
        buf.write(audio_data_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        __timestamp_encoded = self.timestamp.encode('utf-8')
        buf.write(struct.pack('>I', len(__timestamp_encoded)+1))
        buf.write(__timestamp_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">iiiii", self.num_channels, self.num_samples, self.fc, self.fs, self.num_step))
        for i0 in range(self.num_channels):
            buf.write(struct.pack('>%df' % self.num_samples, *self.re_samples[i0][:self.num_samples]))
        for i0 in range(self.num_channels):
            buf.write(struct.pack('>%df' % self.num_samples, *self.im_samples[i0][:self.num_samples]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != audio_data_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return audio_data_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = audio_data_t()
        __timestamp_len = struct.unpack('>I', buf.read(4))[0]
        self.timestamp = buf.read(__timestamp_len)[:-1].decode('utf-8', 'replace')
        self.num_channels, self.num_samples, self.fc, self.fs, self.num_step = struct.unpack(">iiiii", buf.read(20))
        self.re_samples = []
        for i0 in range(self.num_channels):
            self.re_samples.append(struct.unpack('>%df' % self.num_samples, buf.read(self.num_samples * 4)))
        self.im_samples = []
        for i0 in range(self.num_channels):
            self.im_samples.append(struct.unpack('>%df' % self.num_samples, buf.read(self.num_samples * 4)))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if audio_data_t in parents: return 0
        tmphash = (0xb8ae20c84290da36) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if audio_data_t._packed_fingerprint is None:
            audio_data_t._packed_fingerprint = struct.pack(">Q", audio_data_t._get_hash_recursive([]))
        return audio_data_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

